data_frame < - data.frame(col1=c(rep(LETTERS[1:3], each=4)),
col2=c(rep(1: 4, each=3)),
col3=c(1: 12))
c(rep(LETTERS[1:3], each=4)
)
col2=c(rep(1: 4, each=3))
data_frame < - data.frame(col1=c(rep(LETTERS[1:3], each=4)),
col2=c(rep(1: 4, each=3)),
col3=c(1: 12))
# importing the required library
library(tidyverse)
data_frame < - data.frame(stringsAsFactors=FALSE,
col1=c(rep(LETTERS[1:3], each=4)),
col2=c(rep(1: 4, each=3)),
col3=c(1: 12))
data.frame(col1=c(rep(LETTERS[1:3], each=4)),
col2=c(rep(1: 4, each=3)),
col3=c(1: 12))
data_frame < -data.frame(col1=c(rep(LETTERS[1:3], each=4)),
col2=c(rep(1: 4, each=3)),
col3=c(1: 12))
data_frame <- data.frame(stringsAsFactors=FALSE,
col1=c(rep(LETTERS[1:3], each=4)),
col2=c(rep(1: 4, each=3)),
col3=c(1: 12))
data.frame(col1=c(rep(LETTERS[1:3], each=4)),
col2=c(rep(1: 4, each=3)),
col3=c(1: 12))
print("original dataframe")
print(data_frame)
data_frame % >%
ggplot(aes(x=col2,
y=col3))+
geom_mark_ellipse(aes(color=col1,
label=col1),
)+
geom_point(aes(color=col1))
library(dplyr)
data_frame % >%
ggplot(aes(x=col2,
y=col3))+
geom_mark_ellipse(aes(color=col1,
label=col1),
)+
geom_point(aes(color=col1))
data_frame %>%
ggplot(aes(x=col2,
y=col3))+
geom_mark_ellipse(aes(color=col1,
label=col1),
)+
geom_point(aes(color=col1))
data_frame %>%
ggplot(aes(x=col2,
y=col3))+
geom_mark_ellipse(aes(color=col1,
label=col1))+
geom_point(aes(color=col1))
library(ggplot2)
data_frame %>%
ggplot(aes(x=col2,
y=col3))+
geom_mark_ellipse(aes(color=col1,
label=col1))+
geom_point(aes(color=col1))
library(ggplot2)
data_frame %>%
ggplot(aes(x=col2,
y=col3))+
geom_mark_ellipse(aes(color=col1,
label=col1))+
geom_point(aes(color=col1))
install.packages("ggforce")
library(ggforce)
print(data_frame)
data_frame %>%
ggplot(aes(x=col2,
y=col3))+
geom_mark_ellipse(aes(color=col1,
label=col1))+
geom_point(aes(color=col1))
devtools::install_github('duct317/SCFA')
keras::install_keras(tensorflow = "1.10.0")
y
library(SCFA)
library(survival)
dataList <- GBM$data
survival <- GBM$survival
dataList
dataList[[1]]
View(dataList)
View(dataList[[1]])
subtype <- SCFA(dataList, seed = 1, ncores = 4L)
survival
subtype
coxFit <- coxph(Surv(time = Survival, event = Death) ~ as.factor(subtype), data = survival, ties="exact")
coxP <- round(summary(coxFit)$sctest[3],digits = 20)
coxP
print(coxP)
idx <- sample.int(nrow(dataList[[1]]), round(nrow(dataList[[1]])/2) )
survival$Survival
survival$Survival <- survival$Survival - min(survival$Survival) + 1 # Survival time must be positive
survival$Surviva
trainList <- lapply(dataList, function(x) x[idx, ] )
trainSurvival <- Surv(time = survival[idx,]$Survival, event =  survival[idx,]$Death)
trainSurvival
View(trainSurvival)
?Surv
testList <- lapply(dataList, function(x) x[-idx, ] )
testSurvival <- Surv(time = survival[-idx,]$Survival, event =  survival[-idx,]$Death)
# Perform risk prediction
result <- SCFA.class(trainList, trainSurvival, testList, seed = 1, ncores = 4L)
result
View(result)
# Validation using concordance index
c.index <- survival::concordance(coxph(testSurvival ~ result))$concordance
c.index
print(c.index)
?Surv
trainSurvival
Surv
View(trainSurvival)
View(trainSurvival)
View(time = survival[idx,])
View(survival[idx,]$Survival)
survival[idx,]$Survival
survival[idx,]$Death
SCFA.class
result
sort(result)
?SCFA.class
trainSurvival
?survival::concordance
testSurvival
result
install.packages("psych")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
#Load these libraries
library(ggplot2)
library(dlstats)
library(tibble)
#Create the wrapper function
package_trackeR <- function(packages){
#Create the downloads for the package
dl <- dlstats::cran_stats(c(packages))
#Create the plot
plot <- ggplot(dl,
aes(end, downloads, group=package)) +
geom_line(aes(color=package),linetype="dashed") +
geom_point(aes(shape=package, color=package)) +
theme_minimal()
plot <- plot + xlab("Download date") +
ylab("Number of downloads")
#Create a list for multiple returns
returns_list <- list("download_df"=as_tibble(dl),
"downloads_to_date"=sum(dl$downloads),
"downloads_plot"=plot)
return(returns_list)
}
#Call the new function
package_trackeR(c("scCAN"))
install.packages("dlstats")
install.packages("tibble")
#Load these libraries
library(ggplot2)
library(dlstats)
library(tibble)
#Create the wrapper function
package_trackeR <- function(packages){
#Create the downloads for the package
dl <- dlstats::cran_stats(c(packages))
#Create the plot
plot <- ggplot(dl,
aes(end, downloads, group=package)) +
geom_line(aes(color=package),linetype="dashed") +
geom_point(aes(shape=package, color=package)) +
theme_minimal()
plot <- plot + xlab("Download date") +
ylab("Number of downloads")
#Create a list for multiple returns
returns_list <- list("download_df"=as_tibble(dl),
"downloads_to_date"=sum(dl$downloads),
"downloads_plot"=plot)
return(returns_list)
}
#Call the new function
package_trackeR(c("scCAN"))
#Call the new function
package_trackeR(c("scCAN","scDHA","PINSPlus"))
install.packages("ggplot2")
devtools::install_github('AndresMCB/DynamicCancerDriver')
devtools::install_github('AndresMCB/AMCBGeneUtils')
BiocManager::install("phenopath")
library(DynamicCancerDriver)
library(tidyverse)
data("GSE75688_TPM_tumor", package = "DynamicCancerDriver")
HER2_SC_4_02 <- findDCD(GeneExpression = GSE75688_TPM_tumor
, pathCovariate = "HER2"
, PPItop = 0.4
, findEvent = F
, alpha = 0.02)
HER2_SC_4_02
HER2_SC_4_02$eventAt
HER2_SC_4_02$res
HER2_SC_4_02$res$FS
length(HER2_SC_4_02$res$FS)
HER2_SC_4_02$res$CausalImpact
data("GSE75688_TPM_tumor", package = "DynamicCancerDriver")
View(data)
View(data)
View(data)
data
library(DynamicCancerDriver)
library(tidyverse)
data("GSE75688_TPM_tumor", package = "DynamicCancerDriver")
force(GSE75688_TPM_tumor)
dim(GSE75688_TPM_tumor)
colnames(GSE75688_TPM_tumor)
rownames(GSE75688_TPM_tumor)
HER2
?findDCD
devtools::install_github('AndresMCB/DynamicCancerDriver')
devtools::install_github('AndresMCB/AMCBGeneUtils')
BiocManager::install("phenopath")
library(DynamicCancerDriver)
library(tidyverse)
data("GSE75688_TPM_tumor", package = "DynamicCancerDriver")
HER2_SC_4_02 <- findDCD(GeneExpression = GSE75688_TPM_tumor
, pathCovariate = "HER2"
, PPItop = 0.4
, findEvent = F
, alpha = 0.02)
HER2_SC_4_02$res$summary
R.version
BiocManager::install(version = "3.15")
library(BiocManager)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(KEGGREST)
package.version("BiocManager")
library(BiocManager)
BiocManager::install("KEGGREST")
library(BiocManager)
library(KEGGREST)
listDatabases()
org <- keggList("organism")
head(org)
query <- keggGet(c("hsa:10458", "ece:Z5100"))
query
pathways.list <- keggList("pathway", "ath")
head(pathways.list)
biocLite( c("pathview", "gage", "gageData") )
source("http://bioconductor.org/biocLite.R")
BiocManager::install("pathview")
BiocManager::install("gage")
BiocManager::install("gageData")
library(gage)
library(gageData)
data(kegg.sets.hs)
data(sigmet.idx.hs)
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]
head(kegg.sets.hs, 3)
kegg.sets.hs
png <- keggGet("hsa05130", "image")
t <- tempfile()
library(png)
writePNG(png, t)
if (interactive()) browseURL(t)
library(KEGGREST)
pathways.list <- keggList("pathway", "ath")
head(pathways.list)
head(genes.by.pathway)
pathway.codes <- sub("path:", "", names(pathways.list))
pathway.codes
genes.by.pathway <- sapply(pathway.codes,
function(pwid){
pw <- keggGet(pwid)
if (is.null(pw[[1]]$GENE)) return(NA)
pw2 <- pw[[1]]$GENE[c(TRUE,FALSE)] # may need to modify this to c(FALSE, TRUE) for other organisms
pw2 <- unlist(lapply(strsplit(pw2, split = ";", fixed = T), function(x)x[1]))
return(pw2)
}
)
head(genes.by.pathway)
pathways.list <- keggList("pathway", "hsa")
head(pathways.list)
pathway.codes <- sub("path:", "", names(pathways.list))
genes.by.pathway <- sapply(pathway.codes,
function(pwid){
pw <- keggGet(pwid)
if (is.null(pw[[1]]$GENE)) return(NA)
pw2 <- pw[[1]]$GENE[c(TRUE,FALSE)] # may need to modify this to c(FALSE, TRUE) for other organisms
pw2 <- unlist(lapply(strsplit(pw2, split = ";", fixed = T), function(x)x[1]))
return(pw2)
}
)
head(genes.by.pathway)
lenth(pathways.list)
length(pathways.list)
?keggList
res <- keggList("pathway")
hsa_genes <- keggList("hsa")
hsa_genes
keggList(c("hsa:10458"))
query <- keggGet(c("hsa:10458", "ece:Z5100"))
query
query <- keggGet(c("hsa:10458"))
query
names(query[[1]])
query[[1]]$ENTRY
query <- keggGet(c("hsa:10458"),"SYMBOL")
query <- keggGet(c("hsa:10458"),"symbol")
keggGet(c("hsa:10458", "ece:Z5100"), "aaseq")
?keggGet
query
pathway.codes
query <- keggGet(c("pathway.codes"))
query <- keggGet(pathway.codes)
query
for (path in pathway.codes){
query <- keggGet(pathway.codes)
}
res <- keggLink("hsa", "pathway")
res
length(res)
res <- keggLink("pathway", "hsa")
res
res <- keggList("hsa")
res
class(res)
length(res)
res <- keggList("hsa","pathway")
?keggList
pathways.list <- keggList("pathway", "hsa")
head(pathways.list)
BiocManager::install("EnrichmentBrowser")
#step2: check and obtain a list of entry identifiers (in this case: sar) and associated definition for a given database or a given set of database entries.
MRSA252 <- keggList("sar")
MRSA252
#step 3: download the pathways of that organism:
sarpathway <- downloadPathways("sar")
library("EnrichmentBrowser")
#step 3: download the pathways of that organism:
sarpathway <- downloadPathways("sar")
install.packages("dplyr")
#step 3: download the pathways of that organism:
sarpathway <- downloadPathways("sar")
library(packageRank)
install.packages("packageRank")
library(packageRank)
library(ggplot2)
cranlogs::cran_downloads(packages = "scCAN")
cranlogs::cran_downloads(packages = "scCAN",from = "2021")
cranlogs::cran_downloads(packages = "scCAN",from = "2021-01-01")
cranlogs::cran_downloads(packages = "scCAN",from = "2021-01-01",  to = Sys.Date() - 1)
scCAN = cranlogs::cran_downloads(packages = "scCAN",from = "2021-01-01",  to = Sys.Date() - 1)
sum(scCAN$count)
scDHA = cranlogs::cran_downloads(packages = "scCAN",from = "2020-01-01",  to = Sys.Date() - 1)
sum(scDHA$count)
scDHA = cranlogs::cran_downloads(packages = "scDHA",from = "2020-01-01",  to = Sys.Date() - 1)
sum(scDHA$count)
pinPlus = cranlogs::cran_downloads(packages = "PINPlus",from = "2019-01-01",  to = Sys.Date() - 1)
sum(pinPlus$count)
pinsPlus = cranlogs::cran_downloads(packages = "PINSPlus",from = "2019-01-01",  to = Sys.Date() - 1)
sum(pinsPlus$count)
pinsPlus
View(pinsPlus)
pinsPlus = cranlogs::cran_downloads(packages = "PINSPlus",from = "2018-01-01",  to = Sys.Date() - 1)
sum(pinsPlus$count)
pinsPlus = cranlogs::cran_downloads(packages = "PINSPlus",from = "2018-01-01",  to = Sys.Date() - 1)
View(pinsPlus)
scISR = cranlogs::cran_downloads(packages = "scISR",from = "2020-01-01",  to = Sys.Date() - 1)
sum(scISR$count)
sum(scCAN$count)
scCAN = cranlogs::cran_downloads(packages = "scCAN",from = "2021-01-01",  to = Sys.Date() - 1)
sum(scCAN$count)
View(scCAN)
sum(scDHA$count)
z <- matrix(c(0,0,1,1,0,0,1,1,0,0,0,0,1,0,1,1,0,1,1,1,1,0,0,0,"RND1","WDR", "PLAC8","TYBSA","GRA","TAF"), nrow=6,
dimnames=list(c("ILMN_1651838","ILMN_1652371","ILMN_1652464","ILMN_1652952","ILMN_1653026","ILMN_1653103"),c("A","B","C","D","symbol")))
t<-matrix(c("GO:0002009", 8, 342, 1, 0.07, 0.679, 0, 0, 1, 0,
"GO:0030334", 6, 343, 1, 0.07, 0.065, 0, 0, 1, 0,
"GO:0015674", 7, 350, 1, 0.07, 0.065, 1, 0, 0, 0), nrow=10, dimnames= list(c("GO.ID","LEVEL","Annotated","Significant","Expected","resultFisher","ILMN_1652464","ILMN_1651838","ILMN_1711311","ILMN_1653026")))
View(z)
View(tt)
View(t)
View(t)
merge(tt,z,by="row.names",all.x=TRUE)[,-(5:8)]
merge(t,z,by="row.names",all.x=TRUE)[,-(5:8)]
m = merge(t,z,by="row.names",all.x=TRUE)[,-(5:8)]
class(m)
remotes::install_github("IyarLin/survXgboost")
library(survXgboost)
pacman::p_load("survival")
install.packages("pacman")
library(pacman)
pacman::p_load("survival")
pacman::p_load("xgboost")
data("lung")
pacman::p_load_gh("IyarLin/survXgboost")
pacman::p_load("survival")
pacman::p_load("xgboost")
data("lung")
library(survXgboost)
survXgboost::xgb.train.surv()
survXgboost::xgb.train.surv
data("lung")
data(lung)
data()
devtools::install_github("Genentech/GameRank")
devtools::install_github("Genentech/GameRank")
install.packages("vctrs")
install.packages("vctrs")
library(vctrs)
remove.packages("vctrs")
remove.packages("vctrs")
install.packages("F:/vctrs_0.5.1.tar.gz", repos = NULL, type = "source")
detach("vctrs")
detach("package:vctrs", unload=TRUE)
df <- data(iris) ##load data
head(iris) ## see the studcture
##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
## 1          5.1         3.5          1.4         0.2  setosa
## 2          4.9         3.0          1.4         0.2  setosa
## 3          4.7         3.2          1.3         0.2  setosa
## 4          4.6         3.1          1.5         0.2  setosa
## 5          5.0         3.6          1.4         0.2  setosa
## 6          5.4         3.9          1.7         0.4  setosa
##Generate a random number that is 90% of the total number of rows in dataset.
ran <- sample(1:nrow(iris), 0.9 * nrow(iris))
##the normalization function is created
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
##Run nomalization on first 4 coulumns of dataset because they are the predictors
iris_norm <- as.data.frame(lapply(iris[,c(1,2,3,4)], nor))
length(ran)
dim(iris)
summary(iris_norm)
##   Sepal.Length     Sepal.Width      Petal.Length     Petal.Width
##  Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min. :0.00
##  1st Qu.:0.2222   1st Qu.:0.3333   1st Qu.:0.1017   1st Qu.:0.08
##  Median :0.4167   Median :0.4167   Median :0.5678   Median :0.50
##  Mean   :0.4287   Mean   :0.4406   Mean   :0.4675   Mean   :0.45
##  3rd Qu.:0.5833   3rd Qu.:0.5417   3rd Qu.:0.6949   3rd Qu.:0.70
##  Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.00
##extract training set
iris_train <- iris_norm[ran,]
##extract testing set
iris_test <- iris_norm[-ran,]
dim(iris_test)
dim(iris_train)
##extract 5th column of train dataset because it will be used as 'cl' argument in knn function.
iris_target_category <- iris[ran,5]
##extract 5th column if test dataset to measure the accuracy
iris_test_category <- iris[-ran,5]
iris_target_category
iris_test_category
##load the package class
library(class)
##run knn function
pr <- knn(iris_train,iris_test,cl=iris_target_category,k=13)
?knn
install.packages("TDAmapper", dependencies=TRUE)
C1<-c(3,2,4,4,5)
C2<-c(3,7,3,4,5)
C3<-c(5,4,3,6,3)
DF <- data.frame(ID=c("A","B","C","D","E"),C1=C1,C2=C2,C3=C3)
DF
apply(DF, 1, median, na.rm=T)
DF
apply(DF, 1, median)
median(DF[1,])
C1<-c(3,2,4,4,5)
C2<-c(3,7,3,4,5)
C3<-c(5,4,3,6,3)
DF <- data.frame(ID=c(C1=C1,C2=C2,C3=C3)
apply(DF, 1, median, na.rm=T)
DF
DF <- data.frame(ID=c(C1=C1,C2=C2,C3=C3)
)
DF <- data.frame(ID=c(C1=C1,C2=C2,C3=C3))
DF
C1<-c(3,2,4,4,5)
C2<-c(3,7,3,4,5)
C3<-c(5,4,3,6,3)
DF <- data.frame(C1=C1,C2=C2,C3=C3)
apply(DF, 1, median, na.rm=T)
rownames(DF) <- c("A","B","C","D","E")
apply(DF, 1, median, na.rm=T)
m = apply(DF, 1, median, na.rm=T)
dim(m)
m = as.data.frame(apply(DF, 1, median, na.rm=T))
dim(m)
m
install.packages("learnr")
install.packages(learnr)
remotes::install_github("rstudio/learnr")
install.packages("learnr")
library("learnr")
install.packages("htmltools")
library(htmltools)
remove.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
remove.packages(htmltools)
install.packages("htmltools")
install.packages("htmltools")
library(IRdisplay)
setwd("F:/NOSI/NOSI-Google-Cloud-Training")
IRdisplay::display_html('<iframe src="./Quizzes/Quiz_Submodule1.html" width=100% height=450></iframe>')
?display_html
