pDat$pathway_factor <- as.factor(pDat$old.pathway)
pDat$fill_factor <- as.factor(pDat$dataset)
counter <<- 1
plots <- pDat %>%
group_by(disease) %>%
group_split() %>% lapply(function(plotData){
plotData <- data.frame(plotData)
plotTitle <- str_to_title(plotData$disease[1])
if(counter == 1){
plot <- ggplot(plotData, aes(
x = ES / abs(meanES),
y = pathway_factor,
fill = fill_factor
)) +
stat_density_ridges(
quantile_lines = TRUE,
quantiles = c(0.05), alpha = 0.5,
quantile_fun = function(x, probs){
if (x[1] <0){
return(
quantile(x, probs)
)
}
return(
quantile(-x, probs)*-1
)
}
) +
theme_ridges() +
theme(
plot.margin = unit(c(5,5,5,5), "pt"),
# panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
text = element_text(size = 10, face = "bold"),
plot.title = element_text(size = 10, face = "bold", hjust = 0.63),
# legend.position = "top",
legend.position = c(0.5, 0.5),
# legend.justification = "center",
legend.title = element_blank(),
legend.text = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 10, face = "bold", hjust=0.5),
axis.text = element_text(size = 10, face = "bold"),
legend.box.background = element_blank())  +
# scale_fill_manual(values = my_colors) +
geom_segment(aes(
x = NES ,
y = pathway_factor,
xend = NES,
yend = as.numeric(pathway_factor) + 1,
color = fill_factor
)) +
# scale_color_manual(values = )
scale_y_discrete(
# breaks = unique(as.numeric(pDat$old.pathway)),
labels = unique(as.character(pDat$pathway_factor))
) +
ggtitle(plotTitle) +
labs(y = "", x = "ES") +
guides(fill = guide_legend(ncol = 1), colour = guide_legend(
ncol = 1
))
}else{
plot <- ggplot(plotData, aes(
x = ES / abs(meanES),
y = pathway_factor,
fill = fill_factor
)) +
stat_density_ridges(
quantile_lines = TRUE,
quantiles = c(0.05), alpha = 0.5,
quantile_fun = function(x, probs){
if (x[1] <0){
return(
quantile(x, probs)
)
}
return(
quantile(-x, probs)*-1
)
}
) +
theme_ridges() +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin = unit(c(5,5,5,5), "pt"),
# panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
text = element_text(size = 10, face = "bold"),
plot.title = element_text(size = 10, face = "bold", hjust = 0.5),
legend.position = "top",
legend.justification = "center",
legend.title = element_blank(),
legend.text = element_text(size = 10, face = "bold"),
axis.title.x = element_text(hjust=0.5),
axis.text = element_text(size = 10, face = "bold"),
legend.box.background = element_blank())  +
# scale_fill_manual(values = my_colors) +
geom_segment(aes(
x = NES ,
y = pathway_factor,
xend = NES,
yend = as.numeric(pathway_factor) + 1,
color = fill_factor
)) +
scale_y_discrete(
# breaks = unique(as.numeric(pDat$old.pathway)),
labels = unique(as.character(pDat$pathway_factor))
) +
ggtitle(plotTitle) +
labs(y = "", x = "ES") +
guides(fill = guide_legend(ncol = 1), colour = guide_legend(
ncol = 1
))
}
counter <<- counter + 1
plot
})
legendList <- list()
titleList <- list()
j <- 1
for(p in plots) {
legendP <- get_legend(p)
titleP <- get_title(p)
legendList[[j]] <- legendP
titleList[[j]] <- titleP
j <- j+1
}
plotsWithoutLegend <- lapply(plots, function(plot){
plot <- plot + theme(legend.position = "none", title = element_blank(), plot.title = element_blank())
})
gs_titles <- lapply(titleList, function(p)
as_ggplot(p) + theme(
legend.margin=margin(c(0,0,0,0))))
gs_legends <- lapply(legendList, function(p)
as_ggplot(p) + theme(
legend.margin=margin(c(0,0,0,0))))
listAll <- c(gs_titles, gs_legends, plotsWithoutLegend)
gridExtra::grid.arrange(
grobs = listAll,
widths = c(12, 10),
heights = c(0.1, 0.3, 1.5),
layout_matrix = rbind(c(rep(1:2)),
c(rep(3:4)),
c(rep(5:6)))
)
plots[[1]]
counter <- 0
plots <- pDat %>%
group_by(disease) %>%
group_split() %>% lapply(function(plotData){
plotData <- data.frame(plotData)
plotTitle <- str_to_title(plotData$disease[1])
if(counter == 1){
plot <- ggplot(plotData, aes(
x = ES / abs(meanES),
y = pathway_factor,
fill = fill_factor
)) +
stat_density_ridges(
quantile_lines = TRUE,
quantiles = c(0.05), alpha = 0.5,
quantile_fun = function(x, probs){
if (x[1] <0){
return(
quantile(x, probs)
)
}
return(
quantile(-x, probs)*-1
)
}
) +
theme_ridges() +
theme(
plot.margin = unit(c(5,5,5,5), "pt"),
# panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
text = element_text(size = 10, face = "bold"),
plot.title = element_text(size = 10, face = "bold", hjust = 0.63),
# legend.position = "top",
legend.position = c(0.5, 0.5),
# legend.justification = "center",
legend.title = element_blank(),
legend.text = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 10, face = "bold", hjust=0.5),
axis.text = element_text(size = 10, face = "bold"),
legend.box.background = element_blank())  +
# scale_fill_manual(values = my_colors) +
geom_segment(aes(
x = NES ,
y = pathway_factor,
xend = NES,
yend = as.numeric(pathway_factor) + 1,
color = fill_factor
)) +
# scale_color_manual(values = )
scale_y_discrete(
# breaks = unique(as.numeric(pDat$old.pathway)),
labels = unique(as.character(pDat$pathway_factor))
) +
ggtitle(plotTitle) +
labs(y = "", x = "ES") +
guides(fill = guide_legend(ncol = 1), colour = guide_legend(
ncol = 1
))
}else{
plot <- ggplot(plotData, aes(
x = ES / abs(meanES),
y = pathway_factor,
fill = fill_factor
)) +
stat_density_ridges(
quantile_lines = TRUE,
quantiles = c(0.05), alpha = 0.5,
quantile_fun = function(x, probs){
if (x[1] <0){
return(
quantile(x, probs)
)
}
return(
quantile(-x, probs)*-1
)
}
) +
theme_ridges() +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin = unit(c(5,5,5,5), "pt"),
# panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
text = element_text(size = 10, face = "bold"),
plot.title = element_text(size = 10, face = "bold", hjust = 0.5),
legend.position = "top",
legend.justification = "center",
legend.title = element_blank(),
legend.text = element_text(size = 10, face = "bold"),
axis.title.x = element_text(hjust=0.5),
axis.text = element_text(size = 10, face = "bold"),
legend.box.background = element_blank())  +
# scale_fill_manual(values = my_colors) +
geom_segment(aes(
x = NES ,
y = pathway_factor,
xend = NES,
yend = as.numeric(pathway_factor) + 1,
color = fill_factor
)) +
scale_y_discrete(
# breaks = unique(as.numeric(pDat$old.pathway)),
labels = unique(as.character(pDat$pathway_factor))
) +
ggtitle(plotTitle) +
labs(y = "", x = "ES") +
guides(fill = guide_legend(ncol = 1), colour = guide_legend(
ncol = 1
))
}
counter <<- counter + 1
plot
})
legendList <- list()
titleList <- list()
j <- 1
for(p in plots) {
legendP <- get_legend(p)
titleP <- get_title(p)
legendList[[j]] <- legendP
titleList[[j]] <- titleP
j <- j+1
}
plotsWithoutLegend <- lapply(plots, function(plot){
plot <- plot + theme(legend.position = "none", title = element_blank(), plot.title = element_blank())
})
gs_titles <- lapply(titleList, function(p)
as_ggplot(p) + theme(
legend.margin=margin(c(0,0,0,0))))
gs_legends <- lapply(legendList, function(p)
as_ggplot(p) + theme(
legend.margin=margin(c(0,0,0,0))))
listAll <- c(gs_titles, gs_legends, plotsWithoutLegend)
gridExtra::grid.arrange(
grobs = listAll,
widths = c(12, 10),
heights = c(0.1, 0.3, 1.5),
layout_matrix = rbind(c(rep(1:2)),
c(rep(3:4)),
c(rep(5:6)))
)
counter <- 1
plots <- pDat %>%
group_by(disease) %>%
group_split() %>% lapply(function(plotData){
plotData <- data.frame(plotData)
plotTitle <- str_to_title(plotData$disease[1])
if(counter == 1){
plot <- ggplot(plotData, aes(
x = ES / abs(meanES),
y = pathway_factor,
fill = fill_factor
)) +
stat_density_ridges(
quantile_lines = TRUE,
quantiles = c(0.05), alpha = 0.5,
quantile_fun = function(x, probs){
if (x[1] <0){
return(
quantile(x, probs)
)
}
return(
quantile(-x, probs)*-1
)
}
) +
theme_ridges() +
theme(
plot.margin = unit(c(5,5,5,5), "pt"),
# panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
text = element_text(size = 10, face = "bold"),
plot.title = element_text(size = 10, face = "bold", hjust = 0.63),
# legend.position = "top",
legend.position = c(0.5, 0.5),
# legend.justification = "center",
legend.title = element_blank(),
legend.text = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 10, face = "bold", hjust=0.5),
axis.text = element_text(size = 10, face = "bold"),
legend.box.background = element_blank())  +
# scale_fill_manual(values = my_colors) +
geom_segment(aes(
x = NES ,
y = pathway_factor,
xend = NES,
yend = as.numeric(pathway_factor) + 1,
color = fill_factor
)) +
# scale_color_manual(values = )
scale_y_discrete(
# breaks = unique(as.numeric(pDat$old.pathway)),
labels = unique(as.character(pDat$pathway_factor))
) +
ggtitle(plotTitle) +
labs(y = "", x = "ES") +
guides(fill = guide_legend(ncol = 1), colour = guide_legend(
ncol = 1
))
}else{
plot <- ggplot(plotData, aes(
x = ES / abs(meanES),
y = pathway_factor,
fill = fill_factor
)) +
stat_density_ridges(
quantile_lines = TRUE,
quantiles = c(0.05), alpha = 0.5,
quantile_fun = function(x, probs){
if (x[1] <0){
return(
quantile(x, probs)
)
}
return(
quantile(-x, probs)*-1
)
}
) +
theme_ridges() +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin = unit(c(5,5,5,5), "pt"),
# panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
text = element_text(size = 10, face = "bold"),
plot.title = element_text(size = 10, face = "bold", hjust = 0.5),
legend.position = "top",
legend.justification = "center",
legend.title = element_blank(),
legend.text = element_text(size = 10, face = "bold"),
axis.title.x = element_text(hjust=0.5),
axis.text = element_text(size = 10, face = "bold"),
legend.box.background = element_blank())  +
# scale_fill_manual(values = my_colors) +
geom_segment(aes(
x = NES ,
y = pathway_factor,
xend = NES,
yend = as.numeric(pathway_factor) + 1,
color = fill_factor
)) +
scale_y_discrete(
# breaks = unique(as.numeric(pDat$old.pathway)),
labels = unique(as.character(pDat$pathway_factor))
) +
ggtitle(plotTitle) +
labs(y = "", x = "ES") +
guides(fill = guide_legend(ncol = 1), colour = guide_legend(
ncol = 1
))
}
counter <<- counter + 1
plot
})
legendList <- list()
titleList <- list()
j <- 1
for(p in plots) {
legendP <- get_legend(p)
titleP <- get_title(p)
legendList[[j]] <- legendP
titleList[[j]] <- titleP
j <- j+1
}
plotsWithoutLegend <- lapply(plots, function(plot){
plot <- plot + theme(legend.position = "none", title = element_blank(), plot.title = element_blank())
})
gs_titles <- lapply(titleList, function(p)
as_ggplot(p) + theme(
legend.margin=margin(c(0,0,0,0))))
gs_legends <- lapply(legendList, function(p)
as_ggplot(p) + theme(
legend.margin=margin(c(0,0,0,0))))
listAll <- c(gs_titles, gs_legends, plotsWithoutLegend)
gridExtra::grid.arrange(
grobs = listAll,
widths = c(12, 10),
heights = c(0.1, 0.3, 1.5),
layout_matrix = rbind(c(rep(1:2)),
c(rep(3:4)),
c(rep(5:6)))
)
View(pDat)
library(networkD3)
allCombinedData <- plots.enrichment.data %>% lapply(function(data) data$res)
allCombinedData <- as.data.frame(do.call(rbind, allCombinedData))
allCombinedData$disease <- "NA"
for (cat in names(groups)){
allCombinedData$disease[allCombinedData$dataset %in% groups[[cat]]]  <- cat
}
temp.df <- allCombinedData[, c("disease", "dataset", "sample.size")]
temp.df <- distinct(temp.df)
colnames(temp.df) <- c("source", "target", "value")
allCombinedData$nDEG <- lapply(allCombinedData$leadingEdge, function(list) length(list))
temp2.df <- allCombinedData[, c("dataset", "pathway", "nDEG")]
temp2.df <- temp2.df %>% filter(pathway %in% picked.pathways.names)
colnames(temp2.df) <- c("source", "target", "value")
temp.df <- rbind(temp.df, temp2.df)
temp.df$value <- as.numeric(as.list(temp.df$value))
#Plot
nodes <- data.frame(
name=c(as.character(temp.df$source),
as.character(temp.df$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
temp.df$IDsource <- match(temp.df$source, nodes$name)-1
temp.df$IDtarget <- match(temp.df$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = temp.df, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 40, nodeWidth = 30,
nodePadding = 20, height = 900, width = 1200)
p
p
gridExtra::grid.arrange(
grobs = listAll,
widths = c(12, 10),
heights = c(0.1, 0.3, 1.5),
layout_matrix = rbind(c(rep(1:2)),
c(rep(3:4)),
c(rep(5:6)))
)
p
plts <- metaESRes %>% group_by(disease) %>% group_split() %>% lapply(function(plotDat){
plotDat <- data.frame(plotDat)
rownames(plotDat) <- plotDat$pathway
plotDat <- plotDat[picked.pathways.names, ]
plotDat$pathway <- factor(plotDat$pathway, levels = picked.pathways.names[length(picked.pathways.names):1])
sd <- plotDat$NES.combined.sd
sd[sd > 0.5] <- 0.5
plotDat$min <- plotDat$NES.combined - sd*2
plotDat$max <- plotDat$NES.combined + sd*2
plotDat$min[plotDat$min < -2.5] <- -2.5
plotDat$max[plotDat$max > 2.5] <- 2.5
ggplot(plotDat, aes(y = pathway, x = NES.combined, xmin=min, xmax = max)) +  theme_minimal() +
geom_vline(xintercept = c(-1,1), colour="#FA8072", linetype = "longdash") +
geom_vline(xintercept = c(0), colour="black", linetype = "longdash") +
geom_errorbarh(height=.1) + theme_bw() +
geom_point(size = 1, color = "red") +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin = unit(c(5,5,5,5), "pt"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 12),
axis.text.x = element_text(face = "bold", size = 12),
axis.title.x = element_text(face = "bold", size = 12)) +
labs(x = "NES", title = paste0(plotDat$disease[1], " (",plotDat$count[1],")")) +
xlim(-2.5, 2.5)
})
gridExtra::grid.arrange(grobs = c(
list(
ggplot(plts[[1]]$data, aes(y = pathway, x = "")) +  labs(y = "Pathway", title = "", x = "") + theme_minimal() +
theme(panel.grid.major.x = element_blank(), plot.margin = unit(c(2,0,2,5), "pt"), axis.text = element_text(face = "bold", size = 12), axis.title.y = element_text(face = "bold", size = 12))
),
plts
), nrow = 1, widths = c(0.6, rep(1, length(plts))))
